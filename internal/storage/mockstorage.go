// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	metric "github.com/Ssnakerss/practicum-metrics/internal/metric"
	gomock "github.com/golang/mock/gomock"
)

// MockDataStorage is a mock of DataStorage interface.
type MockDataStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDataStorageMockRecorder
}

// MockDataStorageMockRecorder is the mock recorder for MockDataStorage.
type MockDataStorageMockRecorder struct {
	mock *MockDataStorage
}

// NewMockDataStorage creates a new mock instance.
func NewMockDataStorage(ctrl *gomock.Controller) *MockDataStorage {
	mock := &MockDataStorage{ctrl: ctrl}
	mock.recorder = &MockDataStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStorage) EXPECT() *MockDataStorageMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockDataStorage) New(p ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range p {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockDataStorageMockRecorder) New(p ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockDataStorage)(nil).New), p...)
}

// Read mocks base method.
func (m_2 *MockDataStorage) Read(m *metric.Metric) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Read", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockDataStorageMockRecorder) Read(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDataStorage)(nil).Read), m)
}

// ReadAll mocks base method.
func (m *MockDataStorage) ReadAll(arg0 *[]metric.Metric) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockDataStorageMockRecorder) ReadAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockDataStorage)(nil).ReadAll), arg0)
}

// Truncate mocks base method.
func (m *MockDataStorage) Truncate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate.
func (mr *MockDataStorageMockRecorder) Truncate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockDataStorage)(nil).Truncate))
}

// Write mocks base method.
func (m_2 *MockDataStorage) Write(m *metric.Metric) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Write", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockDataStorageMockRecorder) Write(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockDataStorage)(nil).Write), m)
}

// WriteAll mocks base method.
func (m *MockDataStorage) WriteAll(arg0 *[]metric.Metric) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAll", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAll indicates an expected call of WriteAll.
func (mr *MockDataStorageMockRecorder) WriteAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAll", reflect.TypeOf((*MockDataStorage)(nil).WriteAll), arg0)
}
